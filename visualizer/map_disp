#!/usr/local/git/perl/bin/perl


# Things to do
#
# A hash to reach elements in the same order as they were created
#
#

use strict;
use warnings;

use Monitor::Storage;
use Monitor::Utilities;

my %storage_columns;
my %storage_layer_hierarchy;


$storage_columns{data} = { 1=>'key_value', 2=>'storage_layer', 3=>'entity_type', 4=>'rawsizeb', 5=>'sizeb', 6=>'usedb', 7=>'freeb', 8=>'global_unique_id', 9=>'em_query_flag', 10=>'em_query_flag_read', 11=>'name', 12=>'a1', 13=>'a2', 14=>'a3', 15=>'a4', 16=>'a5', 17=>'a6', 18=>'a7', 19=>'a8', 20=>'a9', 21=>'a10', 22=>'a11', 23=>'a12', 24=>'a13', 25=>'a14', 26=>'a15', 27=>'a16', 28=>'a17', 29=>'a18', 30=>'a19', 31=>'a20' };
$storage_columns{keys} = { 1=>'key_value', 2=>'parent_key_value' };
$storage_columns{issues} = { 1=>'type', 2=>'message' };

%storage_layer_hierarchy = (
			    ORACLE_DATABASE => 5,
			    LOCAL_FILESYSTEM => 4,
			    NFS=> 3,
			    VOLUME_MANAGER => 2,
			    OS_DISK => 1);

my $metric_name = 'data';

my %index_entity_key;
my %top_nodes;
my %bottom_nodes;
my %index_global_unique_id;
my %index_indent;
my %index_os_path;
my %indent_hash;


$metric_name = $ARGV[0] if $ARGV[0] and $ARGV[0] =~ /data|keys|issues/;


#-----------------------------------------------------------------------------------------------------------
# Declare subs
#-----------------------------------------------------------------------------------------------------------
sub print_node_data ( $ );
sub np_print_node_in_tree_layout ( $$$ );
sub np_mark_node_indent ( $$$ );
sub np_generate_global_unique_id ( $$ );
sub np_generate_query_flag ( $ );
sub traverse_tree_before_processing_node ( $$\&;\@ );
sub traverse_tree_after_processing_node ( $$\&;\@ );
sub collect_raw_storage_metrics( \% );
sub generate_parent_child_relationship_for_os_visible_storage_entities( \% );
sub collate_and_build_the_keys_table_for_all_entities( \% );
sub process_collected_storage_metrics( \% );
sub cache_storage_metrics_to_file( \% );
sub generate_storage_metrics ( );
sub display_metrics_from_file( $ );

#-----------------------------------------------------------------------------------------------------------
# Platform specific implementation required
#-----------------------------------------------------------------------------------------------------------
sub get_os_storage_entity_identifier($$){
    my  ( $os_path, $storage_data_ref ) = @_;
    return $os_path;
}

sub function_1(){
        
    my $file = '/home/ajdsouza/stormon/mozart/map_metrics.txt';       
    my @results;
    
    open(FH,$file) or die "Failed to open the mapfile $file \n";
    
    while ( <FH> ){
	
	my %mgmt_data;
	
	chomp;
	
	s/^\s+|\s+$//g;
	
	s/^-+//g;
	
	s/^\s+|\s+$//g;
	
	next unless $_;
	
	next if $_ =~ /^\#/;
	
	(
	 $mgmt_data{target_guid},
	 $mgmt_data{key_value},
	 $mgmt_data{storage_layer},
	 $mgmt_data{entity_type},
	 $mgmt_data{sizeb},
	 $mgmt_data{usedb},
	 $mgmt_data{freeb},
	 $mgmt_data{global_unique_id},	 
	 $mgmt_data{start},
	 $mgmt_data{end},
	 $mgmt_data{parent_key_value},
	 $mgmt_data{os_path}, # Can be a os path or a identifier provided by the OS E.g. on windows NT HardDisk0 for a harddisk0
	 $mgmt_data{name},
	 $mgmt_data{a1},
	 $mgmt_data{a2},
	 $mgmt_data{a3},
	 $mgmt_data{a4},
	 $mgmt_data{a5},
	 $mgmt_data{a6},
	 $mgmt_data{a7},
	 $mgmt_data{a8},
	 $mgmt_data{a9},
	 $mgmt_data{a10},
	 $mgmt_data{a11},
	 $mgmt_data{a12},
	 $mgmt_data{a13},
	 $mgmt_data{a14},
	 $mgmt_data{a15},
	 $mgmt_data{a16},
	 $mgmt_data{a17},
	 $mgmt_data{a18},
	 $mgmt_data{a19},
	 $mgmt_data{a20}
	 ) = split,$_;
	
	push @results,\%mgmt_data;
	
    }
    
    close(FH) or warn "Failed to close the file $file\n" and return;
 
    return @results;
}

sub list_of_storage_metric_functions_to_execute(){

    return {
	1=> \&function_1
    };

}

#-----------------------------------------------------------------------------------------------------------
# TRAVERSAL ROUTINES
#-----------------------------------------------------------------------------------------------------------

sub print_node_data ( $ ){
    
    my ( $node ) = @_;
    
    my %prefix = ( sizeb=>'(s', usedb=>'u', freeb=>'f');
    my %suffix = ( freeb=>')');
    
    for ( qw ( storage_layer entity_type key_value sizeb usedb freeb ) )
    {	
	
	next unless defined $node->{$_};
	
	print " $prefix{$_}$node->{$_}$suffix{$_}" and next if $prefix{$_} and $suffix{$_};	
	
	print " $prefix{$_}$node->{$_}" and next if $prefix{$_};	
	print " $node->{$_}$suffix{$_}" and next if $suffix{$_};	
	print " $node->{$_}";	
    }
    
}

sub np_print_node_in_tree_layout ( $$$ ) {    
    
    my ($node, $traverse_tag , $stack_ref) = @_;
    
    my $indent = @$stack_ref;
    
    for ( 1..$indent )
    {
	print "|  " and next if $_ < $indent and $indent_hash{$_} and $indent_hash{$_} > 0;
	print "   " and next if $_ < $indent;	
    }
    
    print "|--->" if $node and $node->{storage_layer};
    
    print_node_data $node if $node and $node->{storage_layer};
    
    print "\n" if $node and $node->{storage_layer};
    
    return 1 if defined $node->{$traverse_tag} and $node->{$traverse_tag} and keys %{$node->{$traverse_tag}};
    
    for ( 1..$indent )
    {
	print "|  " and next if $_ < $indent and $indent_hash{$_} and $indent_hash{$_} > 0;
	print "   " and next if $_ < $indent;	
    }		
    
    print "\n";
    
    return 1;
    
}


sub np_mark_node_indent ( $$$ ) {
	
    my ( $node, $traverse_tag, $stack_ref ) = @_;

    my $indent = @$stack_ref;
        
    warn "Traverse direction is unknown\n" and return unless $traverse_tag =~ /child_node_list|parent_node_list/;
    
    $node->{"$traverse_tag._indent"} = $indent;

    push @{ $index_indent{$traverse_tag}{$indent} }, $node;
    
    return 1;
    
}


# Keep the peer to peer horizontal relationship between entities which have the same global unique id
#next unless  $index_entity_key{$key_value}->{global_unique_id};

#push @{$index_global_unique_id{$index_entity_key{$key_value}->{global_unique_id}}} , $index_entity_key{$key_value};

# If part of another - partition, subdisk, file then put the start and end blocks
sub np_generate_global_unique_id ($$) {
    
    my ($node, $traverse_tag ) = @_;
    
    warn "Traverse direction is unknown\n" and return unless $traverse_tag =~ /child_node_list|parent_node_list/;
    
    return 1 if $node->{global_unique_id};
    
    return 1 unless $node->{storage_layer};
    
    if ( defined $node->{child_node_list} and $node->{child_node_list} and keys %{$node->{child_node_list}} ) {
	
	for my $key_value ( sort {$index_entity_key{$a}->{global_unique_id} cmp $index_entity_key{$b}->{global_unique_id}}  keys %{$node->{child_node_list}} ){
	    
	    next if defined $index_entity_key{$key_value}->{em_query_flag} and $index_entity_key{$key_value}->{em_query_flag} =~ /CONTAINER/i;
	    	    
	    warn "Global unique ID is null for $key_value while generating gid for $node->{key_value}" and return unless $index_entity_key{$key_value}->{global_unique_id};
	    
	    $node->{global_unique_id} .= "_$index_entity_key{$key_value}->{global_unique_id}";
	    
	}
    }
    
    $node->{global_unique_id} .= "_S$node->{start}" if $node->{start};
    
    $node->{global_unique_id} .= "_E$node->{end}" if $node->{end};
    
    $node->{global_unique_id} = "$node->{target_guid}_$node->{key_value}" unless defined $node->{global_unique_id} and $node->{global_unique_id};
    
    return 1;
    
}


# Generate the query flags for each entity node
sub np_generate_query_flag ($) {
    
    my ($node) = @_;
    my %query_flag;
    
    # If top most in a layer then TOP
    # if bottom in a layer then BOTTOM
    # if intermediate then INTERMEDIATE
    # if container then CONTAINER
    # if not allocaed then UNALLOCATED
    
    # Flag spares too

    return 1 unless $node->{storage_layer};
    	    
    $query_flag{UNALLOCATED} = 1 , $query_flag{TOP} = 1 unless defined $node->{parent_node_list} and $node->{parent_node_list} and grep !/CONTAINER/, map{ $index_entity_key{$_}->{em_query_flag} if defined $index_entity_key{$_}->{em_query_flag}} keys %{$node->{parent_node_list}};    
    
    $query_flag{BOTTOM} = 1 unless defined $node->{child_node_list} and $node->{child_node_list} and grep !/CONTAINER/, map{ $index_entity_key{$_}->{em_query_flag} if defined $index_entity_key{$_}->{em_query_flag} } keys %{$node->{child_node_list}};
    
    if ( defined $node->{parent_node_list} and $node->{parent_node_list} and keys %{$node->{parent_node_list}} ) {
	
	for my $key_value ( keys %{$node->{parent_node_list}} ){
	    
	    next if defined $index_entity_key{$key_value}->{em_query_flag} and $index_entity_key{$key_value}->{em_query_flag} =~ /CONTAINER/;
	    
	    # ATLEAST one parent from another storage layer
	    $query_flag{TOP} = 1 and last if $index_entity_key{$key_value}->{storage_layer} ne $node->{storage_layer};
	}
    }
    
    if ( defined $node->{child_node_list} and $node->{child_node_list} and keys %{$node->{child_node_list}} ) {
	
	for my $key_value ( keys %{$node->{child_node_list}} ){
	    
	    next if defined $index_entity_key{$key_value}->{em_query_flag} and $index_entity_key{$key_value}->{em_query_flag} =~ /CONTAINER/;
	    
	    # Atleast one child from another storage layer
	    $query_flag{BOTTOM} = 1 and last if $index_entity_key{$key_value}->{storage_layer} ne $node->{storage_layer};
	}
    }
    
    $query_flag{CONTAINER} = 1 , delete $query_flag{UNALLOCATED} , delete $query_flag{BOTTOM}, delete $query_flag{TOP} if $node->{entity_type} =~ /disk\s*group|disk\s*set|volume\s*group/i;
    
    $query_flag{INTERMEDIATE} = 1 unless defined $query_flag{BOTTOM} or defined $query_flag{TOP};
    
    for my $flag ( sort keys %query_flag )
    {
	
	$node->{em_query_flag} .= "_$flag" unless defined $node->{em_query_flag} and $node->{em_query_flag} =~ /$flag/;
		
    }
    
    if ( $node->{em_query_flag} =~ /CONTAINER/ ){
	
	for ( @{$node->{parent_node_list}} , @{$node->{child_node_list}} ){
	    generate_query_flag $_ or return;
	}
    }

    return 1;
    
}




# Traverse the tree based on the start and tag passed 
# first traverse the nodes and then perform the function on the current node
sub traverse_tree_before_processing_node( $$\&;\@ ){
    
    my ($node, $traverse_tag, $node_processing_function_pointer,$stack_ref) = @_;
        
    push @$stack_ref,$node;    

    my $indent = @$stack_ref;
    
    if ( defined $node->{$traverse_tag} and $node->{$traverse_tag} and keys %{$node->{$traverse_tag}} ){
    
	my $node_count = keys %{$node->{$traverse_tag}} or pop @$stack_ref  and  warn "No $traverse_tag at node $node->{storage_layer} $node->{entity_type} $node->{key_value}\n" and return;
	
	for my $i ( 1..$node_count ){
	    
	    my $key_value = (keys %{$node->{$traverse_tag}})[$i-1];
	    
	    my $next_node = $index_entity_key{$key_value};
	    
	    next unless $next_node;
	    
	    bless $next_node;
	    
	    $indent_hash{$indent+1} = $node_count-$i;
	    
	    traverse_tree_before_processing_node($next_node, $traverse_tag, &$node_processing_function_pointer,@$stack_ref) or  pop @$stack_ref and return; 
	    
	}
    }
    
    $node_processing_function_pointer->($node, $traverse_tag, @$stack_ref) or pop @$stack_ref and return;
    
    pop @$stack_ref;
    
    return 1; 
}



# Traverse the tree based on the start and tag passed
sub traverse_tree_after_processing_node( $$\&;\@ ){
    
    my ($node, $traverse_tag, $node_processing_function_pointer,$stack_ref) = @_;
    
    push @$stack_ref,$node;    
    
    my $indent = @$stack_ref;    

    $node_processing_function_pointer->($node, $traverse_tag, \@$stack_ref ) or pop @$stack_ref and return;
    
    pop @$stack_ref and return 1 unless defined $node->{$traverse_tag} and $node->{$traverse_tag} and keys %{$node->{$traverse_tag}};
    
    my $node_count = keys %{$node->{$traverse_tag}} or pop @$stack_ref and warn "No $traverse_tag at node $node->{storage_layer} $node->{entity_type} $node->{key_value}\n" and return;;
    
    for my $i ( 1..$node_count ){
	
	my $key_value = (keys %{$node->{$traverse_tag}})[$i-1];
	
	my $next_node = $index_entity_key{$key_value};
	
	next unless $next_node;
	
	bless $next_node;
	
	$indent_hash{$indent+1} = $node_count-$i;

	traverse_tree_after_processing_node($next_node, $traverse_tag, &$node_processing_function_pointer,@$stack_ref) or pop @$stack_ref and return; 
	
    }
    
    pop @$stack_ref;
    
    return 1; 
}


#--------------------------------------------------------------------------------------------------------------


sub collect_raw_storage_metrics( \% ) {
    
    my ( $storage_data_ref ) = @_;
    
    # Get List of functions to execute in the top down order, store this order as the hierarchy for storage layers here
    # Loop thru them and execute them and store the results in the array
    # Process the array
    
    my $list_of_storage_metric_functions_ref = list_of_storage_metric_functions_to_execute;
    my @all_metric_data;
    
    for my $function_order ( sort {$a cmp $b}  keys %$list_of_storage_metric_functions_ref )
    {
	my @array_of_metrics_hash_refs_from_function = $list_of_storage_metric_functions_ref->{$function_order}->() or return;
	
	push @all_metric_data, @array_of_metrics_hash_refs_from_function;
    }
    
    
    for my $metric_hash_data_ref ( @all_metric_data ){
	
	for my $key_value ( keys %$metric_hash_data_ref  ){
	    
	    next unless $metric_hash_data_ref->{$key_value};
	    
	    $metric_hash_data_ref->{$key_value} =~ s/^\s+|\s+$//g;
	    
	    $metric_hash_data_ref->{$key_value} =~ s/^-+$//g;	
	    
	    $metric_hash_data_ref->{$key_value} =~ s/-/ /g if $key_value =~ /etity_type/i;
	    
	}
	
	# ERROR If there is NO entry in key master for node
	die "key_value cannot be null in key map " and exit unless $metric_hash_data_ref->{key_value};
	
	$metric_hash_data_ref->{key_value} = "$metric_hash_data_ref->{storage_layer}_$metric_hash_data_ref->{key_value}";
	$metric_hash_data_ref->{parent_key_value} = "$metric_hash_data_ref->{storage_layer}_$metric_hash_data_ref->{parent_key_value}" if $metric_hash_data_ref->{parent_key_value};
	
	push @{$storage_data_ref->{parent_key}{$metric_hash_data_ref->{key_value}}}, $metric_hash_data_ref->{parent_key_value};
	
	# WHat about entities that cannot be recognized on the OS but can be shared across Layers, like what ??? - Disks on a windows NT box !!
	$index_os_path{key_value}{$metric_hash_data_ref->{key_value}}{$metric_hash_data_ref->{os_path}} = $metric_hash_data_ref, 
	$index_os_path{os_path}{$metric_hash_data_ref->{os_path}}{$metric_hash_data_ref->{key_value}} = $metric_hash_data_ref if $metric_hash_data_ref->{os_path};
	
	next if $index_entity_key{$metric_hash_data_ref->{key_value}};
	
	$index_entity_key{$metric_hash_data_ref->{key_value}} = $metric_hash_data_ref;
	
	push @{$storage_data_ref->{data}}, $metric_hash_data_ref;
	
    }
    
    return 1;
    
}


sub generate_parent_child_relationship_for_os_visible_storage_entities( \% ) {

    my ( $storage_data_ref ) = @_;

   # Interlink between the entities across different storage layers that are represented on the OS
    # Get the identifier based on the
    for my $os_path( keys %{$index_os_path{os_path}} ){
	
	for my $key_value( keys %{$index_os_path{os_path}{$os_path}} ){
	    
	    $index_os_path{os_storage_path_identifier}{$os_path} = get_os_storage_entity_identifier $os_path ,$index_entity_key{$key_value} or return;
	    
	    push @{$index_os_path{os_storage_identifier_path}{$index_os_path{os_storage_path_identifier}{$os_path}}},$index_entity_key{$key_value};
	    
	}
    }
    
    for my $key_value ( keys %{$index_os_path{key_value}} ){
	
	warn "Failed to find an identifier on the OS for $index_entity_key{$key_value}->{os_path} "  and return unless $index_os_path{os_storage_path_identifier}{$index_entity_key{$key_value}->{os_path}};
	
	# Get all the storage data with the same identifier as the current storage data and find an parent key from them
	for my $os_id_storage_data_ref( @{$index_os_path{os_storage_identifier_path}{$index_os_path{os_storage_path_identifier}{$index_entity_key{$key_value}->{os_path}}}} )
	{	    
	    next unless $os_id_storage_data_ref->{storage_layer} ne $index_entity_key{$key_value}->{storage_layer};
	    
	    push @{$storage_data_ref->{parent_key}{$index_entity_key{$key_value}->{key_value}}},$os_id_storage_data_ref->{key_value} and next if $storage_layer_hierarchy{$index_entity_key{$key_value}->{storage_layer}} <  $storage_layer_hierarchy{$os_id_storage_data_ref->{storage_layer}};
	    
	    push @{$storage_data_ref->{parent_key}{$os_id_storage_data_ref->{key_value}}},$index_entity_key{$key_value}->{key_value};
	    
	}
	
    }

    return 1;
}


sub collate_and_build_the_keys_table_for_all_entities(\%){
    
    my ( $storage_data_ref ) = @_;
    
    for my $key_value ( keys %{$storage_data_ref->{parent_key}} ) {
	
	# ERROR If there is NO entry in key master for node
	die "key_value cannot be null in key map " and return unless $key_value;
	
	# ERROR If there is NO entry in key master for node
	die "Unable to find the entry in key master for key map $key_value " and return unless $index_entity_key{$key_value};
		
	for my $parent_key_value ( @{$storage_data_ref->{parent_key}{$key_value}} ){
	    
	    # WARN If there is NO entry in key master for node
	    $parent_key_value = $key_value unless $parent_key_value;
	    
	    # ERROR If there is a parent node and if there is NO entry in key master for parent node
	    die " Unable to find the entry in key master for parent node $parent_key_value " and return unless defined $index_entity_key{$parent_key_value};
	    
	    # Build the keys array for reporting
	    push @{$storage_data_ref->{keys}}, {key_value=>$key_value, parent_key_value=>$parent_key_value};
	    
	    next unless $key_value ne $parent_key_value;
	    
	    # Keep the parent to child relationship between the parent node and child node for top down traversal
	    $index_entity_key{$parent_key_value}->{child_node_list}{$key_value} = 1;
	    
	    # Keep the child to parent relationship between the parent node and child node for bottom up traversal
	    $index_entity_key{$key_value}->{parent_node_list}{$parent_key_value} = 1;
	    
	}
	
    }
        
    return 1;
    
}


sub process_collected_storage_metrics(\%) {
    
    my ( $storage_data_ref ) = @_;
    
    generate_parent_child_relationship_for_os_visible_storage_entities(%$storage_data_ref) or return;
    
    collate_and_build_the_keys_table_for_all_entities(%$storage_data_ref) or return;
    
    # From the node List get the nodes which are the bottom ones, ones with no children	
    for my $node ( values %index_entity_key  ) {
	
	# If there is no parent node then this is a top node
	$top_nodes{child_node_list}{$node->{key_value}} = 1 unless defined $node->{parent_node_list} and $node->{parent_node_list} and keys %{$node->{parent_node_list}};
	
	# If there are no children then this is a bottom node
	$bottom_nodes{parent_node_list}{$node->{key_value}} = 1  unless defined $node->{child_node_list} and $node->{child_node_list} and keys %{$node->{child_node_list}};
	
    }
    
    traverse_tree_after_processing_node \%top_nodes ,'child_node_list',&np_mark_node_indent or die "Failed to mark child tree indent";    
    traverse_tree_after_processing_node \%bottom_nodes ,'parent_node_list',&np_mark_node_indent or die "Failed to mark parent tree indent";    
    traverse_tree_before_processing_node \%top_nodes ,'child_node_list',&np_generate_global_unique_id or die "Failed to generate the global unique_id for all nodes in the storage tree";    
    traverse_tree_before_processing_node \%top_nodes ,'child_node_list',&np_generate_query_flag or die "Failed to generate the global unique_id for all nodes in the storage tree";

    # Print the tree top down
    traverse_tree_after_processing_node \%top_nodes  ,'child_node_list',&np_print_node_in_tree_layout or die "Failed to print the tree ";
    
    return 1;
    
}



sub cache_storage_metrics_to_file(\%){
    
    my ( $storage_data_ref ) = @_;
        
    for my $metric_name( qw ( data keys issues ) ){
	
	open(FH,'>',"storage_host_$metric_name") or die "Failed to open the mapfile storage_host_$metric_name while generating metrics\n";
	
	print FH "columns=";
	
	for my $column_order ( sort {$a <=> $b} keys %{$storage_columns{$metric_name}} ){
	    print FH "$storage_columns{$metric_name}{$column_order}|";
	}
	
	print FH "\n";
	
	close(FH) and next unless $storage_data_ref->{$metric_name};
	
	for my $row ( @{$storage_data_ref->{$metric_name}} ){
	    
	    for my $column_order ( sort {$a <=> $b} keys %{$storage_columns{$metric_name}} ){
		print FH "$row->{$storage_columns{$metric_name}{$column_order}}" if $row->{$storage_columns{$metric_name}{$column_order}};
		print FH "|";
	    }
	    
	    print FH "\n";
	}
	
	close(FH) or warn "Failed to close the file storage_host_$metric_name while generating metrics \n" and return;;
	
    }
    
return 1;

}


sub generate_storage_metrics() {
    
    my %storage_data;
    
    collect_raw_storage_metrics(%storage_data) or return;    
    
    process_collected_storage_metrics(%storage_data) or return;
    
    cache_storage_metrics_to_file(%storage_data) or return;
       
    return 1;
}



sub display_metrics_from_file($){
    
    my ( $metric_name) = @_;
    
    open(FH,"storage_host_$metric_name") or die "Failed to open the mapfile for storage_host_$metric_name while reading metrics\n";
    
    my @columns;
    my @data;
    
    while ( <FH> ){
	
	my %row;
	
	chomp;
	
	s/^\s+|\s+$//g;
	
	@columns = split /\|/,substr $_ , length('columns=') and next if $_ =~ /^columns=/;
	
	my @values = split /\|/;
	
	@row{ @columns } = @values;
	
	push @data,\%row;    
    }
    
    close(FH) or warn "Failed to close the file storage_host_$metric_name while reading metrics\n";
    
    for my $row ( @data ){
	
	for my $column_order ( sort {$a <=> $b} keys % {$storage_columns{$metric_name}} ){
	    
	    print "$row->{$storage_columns{$metric_name}{$column_order}}" if $row->{$storage_columns{$metric_name}{$column_order}};
	    print "|";
	    
	}
	
	print "\n";
    }
    
    return 1;
    
}

generate_storage_metrics or die " Failed to generate storage metrics" unless -e "storage_host_$metric_name";

display_metrics_from_file($metric_name) or die "Failed to read storage metrics for $metric_name from file";
