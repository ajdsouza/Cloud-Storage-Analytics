#!/usr/local/git/perl/bin/perl
#
# Copyright  (c) 2001,2002  Oracle Corporation All rights reserved
# Author: Vijay Swamidass
#
#  $Id: blddir,v 1.2 2002/07/26 19:23:34 vswamida Exp $
#
#  $Log: blddir,v $
#  Revision 1.2  2002/07/26 19:23:34  vswamida
#  Optimizations: removed loop from touch sub, added exclusion list for unneeded dev files, declare variables outside of while loop.
#
#  Revision 1.1  2002/07/03 00:10:07  vswamida
#  Creates a directory structure from a file given by 'repdir.'
#

use strict;
use warnings;
use Benchmark;

die "Usage: blddir <source file> <dest>" if not ($ARGV[0] and $ARGV[1]);

my $SRC = $ARGV[0];
my $DEST = $ARGV[1];

die "Source not found." if not -e $SRC;
die "DEST = '/' - please check destination." if $DEST eq '/';

# This does the equivalent of the UNIX 'touch' command
sub touch {
        my ($file) = @_;
        my $now = time;
        local (*TMP);
        utime ($now, $now, $file)
        || open (TMP, ">>$file")
        || warn ("Couldn't touch file: $!\n");
}

open (FH,"<$SRC");
#&Benchmark::timethis(500000,' ($node,$type,$link) = split(/!/,"/dev/asdf/sdf!c!/something")');

my ($node,$type,$link);
while (<FH>) {

	# List of unecessary files in /dev. This is done for performance reasons.  
	# Modify as needed.
	next if /(dev\/tty)|(dev\/pts)|(dev\/fd\/)|(dev\/pty)|(dev\/usb\/)/;

	($node,$type,$link) = split('!',$_);

	chomp $link;

	if ( $type eq 'd' ) {
		system ("mkdir -p $DEST/$node");
	}
	elsif ( $link and $type eq 'l' ) {
		symlink $link,"$DEST/$node";
	}
	elsif ( $type eq 'c') {
		system ("mknod $DEST/$node c 1 1");
	}
	else {
		touch "$DEST/$node \n"; 
	}
} 

close FH;
#my $now = time - $^T;
#print "$now\n";
exit;
