#!/usr/local/git/perl/bin/perl
#
# Copyright  (c) 2001,2002  Oracle Corporation All rights reserved
# Author: Vijay Swamidass
#
#  $Id: pretender,v 1.6 2002/07/02 20:15:47 vswamida Exp $
#
#  $Log: pretender,v $
#  Revision 1.6  2002/07/02 20:15:47  vswamida
#  We now save the exit value of the command we are calling, so that it can be regenerated at test time.
#
#  Revision 1.5  2002/07/02 16:34:40  vswamida
#  Changed open/close to 'exec' in for MAKEing the test.  This allows the return value of the system command to be returned to stormon.
#
#  Revision 1.4  2002/06/28 19:44:13  vswamida
#  Changed the path and $testdir to allow tests to be stored in user's home directory.
#
#  Revision 1.3  2002/06/26 18:10:31  vswamida
#  Removed the second execution of the command.  The output file from the first execution is echoed.
#
#  Revision 1.2  2002/06/14 20:54:11  vswamida
#  *** empty log message ***
#
#  Revision 1.1  2002/06/07 23:42:18  vswamida
#  This file is used for making and running tests.  Symbolic links for system
#  commands are pointed at this file.  When the links are called, this script
#  "pretends" to be the command by either calling the command or reading the
#  output of the command from a file.
#

use strict;
use warnings;

$ENV{PATH}="/usr/xpg4/bin:/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/git/oem/storage";

# These vars have probably been set by either the testrun or testmake script.
my $mode = $ENV{MODE};
my $testname = $ENV{TESTNAME};

# Get rid of -,/, and spaces in the arguments
my @args = join("",@ARGV);
map { s/[-\/\s]//g; } @args;

# Extract the filename of the command (Strip any path information)
# $0 is the command name.  For example, if df -k was called, $0 is 'df' 
# This is done because we call this file through symbolic links.
my $cmd = $0;
$cmd =~ s/\S*\///g;

# The location of the files created by this command
my $testdir="$ENV{TESTDIR}/input";

# The filename for the output.  This filename enables us to store output for
# df -k, df -n, df -P from the same system.
my $filename = "$cmd@args";

if ($mode eq "MAKE")
{
	# Call the system command and send the output to the file.
	my $retval = system ("$cmd @ARGV > $testdir/$filename 2>/dev/null");

 	open (RF,">$testdir/$filename.retval");
	print RF $retval;
	close RF;	

        open (FILE,"<$testdir/$filename");
        while (<FILE>) {
                print;
        }

	exit ($retval >> 8);
}
elsif ($mode eq "RUN")
{
	# In the chrooted environment, read and print the file which 
	# stores the output for the system command we call
	die "File not found." if not -e "$testdir/$filename";
	open (FILE,"<$testdir/$filename");
	while (<FILE>) {
		print;
	}
	close FILE;

	open (RF,"<$testdir/$filename.retval");
        my $retval = readline(*RF);
	chomp $retval;
        close RF;

	exit ($retval >> 8);
}
else
{	
	# If there is no testing being done, just call the command.
	exec "$cmd @ARGV";
}

